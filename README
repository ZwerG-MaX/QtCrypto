Qt Cryptographic Architecture - New Generation (QCA-NG/QtCrypto) :: Azeth's Fork
-------------------------------------------------
Date: August 8th, 2011
Website: https://github.com/Azeth/qca-ng

Project Lead/Maintainer (2011-current):
  Azeth <admin@azeth.net>

Project Lead/Maintainer (2003-2011):
  Justin Karneges <justin@affinix.com>
  (March 2007 - August 2007 under Barracuda Networks employment)

Development, Documentation, Unittests (2004-2011):
  Brad Hards <bradh@frogmouth.net>

Special Thanks:
  Portugal Telecom (SAPO division), for sponsorship
  Alon Bar-Lev, for smart card and design assistance
  Jack Lloyd, for Botan and X.509 mentoring
  L. Peter Deutsch, for the public domain MD5 implementation
  Steve Reid, for the public domain SHA1 implementation
  Jason Kim, for the CMS Signer graphics


Install
-------
  For installation or compiling instructions, see the INSTALL file.


License
-------
  This library is licensed under the Lesser GNU General Public License.  See
  the COPYING file for more information.


Changes
-------
  Planned in 3.0.0 (new generation)
  - Add ECC support (and related algorithms)
  - OpenSSL plugin shall comply with 1.0.0 version changes (up from 0.9.6)
  - Redesign some original API
  - Follow original QCA TODO list


Description
-----------

  QCA-NG is a library forked from original QCA discontinued project that 
  provides an easy API for a range of cryptographic features, including 
  SSL/TLS, X.509 certificates, SASL, OpenPGP, smartcards, and much more.

  Projects focuses mainly on integration with OpenSSL, but if you think you
  can write implementation for other provider, please let me know. 

  Functionality is supplied via plugins.  This is useful for avoiding
  dependence on a particular crypto library and makes upgrading easier,
  as there is no need to recompile your application when adding or
  upgrading a crypto plugin.

  In order for QCA-NG to be of much use, you'll want to install some plugins.

  QCA was originally created to support the security needs of the
  Psi XMPP/Jabber client project ( http://psi-im.org/ ).

  API Documentation is located in the 'apidocs' subdirectory.

  If you like to collaborate, please send me email or message through GitHub.


Have fun,
-Azeth
