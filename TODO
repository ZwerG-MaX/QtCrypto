* beta6
  other:
    alon's configuration suggestions (see "QCA side by side" thread)
    plugins need to follow the new build process

* beta7
  api:
    extended key usage can have OIDs ?!
    deinit method for providers, to occur for all before destruction?
    it's possible we use SecureArray in some unnecessary places
    Q_DISABLE_COPY on some objects
    give all classes non-default ctors/dtors/copy/op=, and dpointers?
    add more "getters" to the library?
    don't forget to QCA_EXPORT everything
  code:
    default: config option for setting provider priorities
    cert: rfc 2818 hostname validation
    cert: better makeFriendlyName diffing for key usage (consider OIDs) ?
    keystore: complete
    securelayer: complete
  other:
    finish cmssigner, set to 1.0
    cmssigner: i'm getting a crash sometimes during sign..  test and trace
    update README/INSTALL, special thanks to Jack Lloyd
    regenerate botantools.diff

* test1
  doc:
    documentation overhaul
    document provider interface
    document which functions might cause a synchronous asker:
      pkey: sign/decrypt, or any non-KeyLoader privkey/keybundle loading
      keystore: entryList (non-async), ensureAvailable, ensureAccessible
      securemessage: waitForFinished
    Change Doxyfile config to capture whole API, and to generate Latex manual
  code:
    synchronizer: cleanup
    publickey: cleanup
    cert: cleanup
    keystore: cleanup
    securelayer: cleanup
    securemessage: cleanup
    add logging to qca lib and other plugins
    add more asserts?
  other:
    update the rootcerts with mozcerts
    make sure the version is correct in all locations (README, etc)

* examples
  create example for BigInteger
  create example for OpenPGP
  create example for CMS
  create example for using TLS with smart cards (maybe reuse ssltest?)
  fix SASL examples (client and server)

* additional unit tests (using QTestLib):
  - OpenPGP
  - CMS
  - TLS ?
  - SASL ?
  - QPipe
  - FileWatch / DirWatch
  - Complete the pkits tests

* write plugin support
  qca-botan: implement
  qca-egads (or qca-egd): implement for Random support

* possibilities for the future:
  qcatool: streaming securemessage operations
  qcatool: instead of printing full usage at every wrong turn, we might try
    to print something closer to the context
  access to list of known cached certs, similar to how cmssigner works?
  securemessage: ability to know which key has performed a decrypt?
  emsa3Encode: implement in provider instead of qca?
  OCSP
  tls ocsp stapling
  internally managed intermediate object storage
  securemessage: algorithm selection for cms/pgp (and use SecurityLevel?)
  tls: renegotiation
  Key wrapping - RFC3217 and RFC3394
  quoted-printable TextFilter
  keygen on smart cards
  keystore: symmetric keys, arbitrary app data
  cert: any other fields we don't support but might be used out there
  cert: support for arbitrary extensions?
  cms: fine-grained control over smime attribs
  convertToPublic should return a publickey rather than change itself
  providers for:
    Mozilla NSS
    Windows CryptoAPI
    Linux kernel crypto support, if the userspace API ever gets sorted out
    Intel Performance Primatives library
