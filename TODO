* Additional unit tests
* Bundle root certificates to be used on platforms without a system store
  (we need to choose a reliable source, maybe mozilla or debian?  kde??)
* Update to latest Botan, and remake the botantools patch as appropriate

* API documentation
  update cipher docs according to new args/ordering
  clean up Algorithm
  clean up Filter
  add QCA::systemStore() and haveSystemStore()
  document all the stuff in qca_cert.h
  document all the stuff in qca_publickey.h
  document all the stuff in qca_securelayer.h
  document all the stuff in qca_securemessage.h
  think about documenting the various providers (qcaprovider.h)

* Considerations
  it's possible we use QSecureArray in some unnecessary places
  don't forget to QCA_EXPORT everything
  standardize on count() vs size() when iterating?

* finish API:
  qcaprovider.h

* build system:
  get qt 4 support into qconf
  on non-win/mac, allow specifying of flatfile store, else install/use built-in
  make sure it installs properly
  create qt4 qmake .prf for auto-discovery by applications

* finish code for APIs:
  redundant global static functions in publickey / cert
  CertificateOptions: isValid
  Certificate: operator==
  cert: rfc 2818 hostname validation
  ca
  store
  system store: all added certs need to be flagged as trusted
  personal bundle
  tls
  sasl
  securemessagesystem (consider thread issues)
  openpgp
  smime
  default provider should have built-in sha1 and md5 (?)

* examples
  create example for BigInteger
  update cipher example (after API sorted out)
  add systemStore() example

* write plugin support
  qca-tls: do something about the cert check lag.  maybe a thread?
  qca-botan: implement
  qca-egads (or qca-egd): implement for Random support
  qca-openssl: need to implement locking callbacks.
  figure out why Valgrind reports so many memory leaks

* possibilities for the future:
  smart cards (pkcs11/15)
  xmldsig
  xmlenc (sort of done already in cutestuff/xmlsec, but need to qca-ify)
  advanced pgp functionality (full key info and ability to manipulate keyrings)
  Key wrapping - RFC3217 and RFC3394
  dtls (secure UDP)
  quoted-printable TextFilter

